#Task 1

#A bubble sort can be modified to “bubble” in both directions.
#The first pass moves “up” the list and the second pass moves “down.” 
#This alternating pattern continues until no more passes are necessary.
#Implement this variation and describe under what circumstances it might be appropriate.


#Звичайний бульбашковий алгоритм сортування 
def bubble_sort(list):
    swap = False
    while not swap:
        swap=True
        for j in range(1, len(list)):
            if list[j-1] > list[j]:
                swap = False
                temp=list[j]
                list[j] = list[j-1]
                list[j-1] = temp

#Цикл for для порівнянь, цикл while для проходів по списку.   

#Двонаправлений бульбашковий алгоритм сортування:



def up_down_bubble_sort(arr):
    n = len(arr)
    begin = 0
    end = n - 1
    swapped = True

    while swapped:
        swapped = False

        # наверх списка
        for i in range(begin, end):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                swapped = True

        if not swapped:
            break

        swapped = False
        end -= 1

        # прохід вниз списка
        for i in range(end - 1, begin - 1, -1):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                swapped = True

        begin += 1

    return arr

Двонаправлене сортування методом bubble може бути доречним у випадку, коли
сортування списку майже повністю виконано, і цей список, що
ми сортуємо, має невелику кількість невідсортованих елементів.
Двосторонній прохід може покращити ефективність сортування методом bubble, за рахунок 
пришвидшення переміщення елементів на їх позиції. 
Часова складність бінаправленого бульбашкового сортування складає O(n^2),
як і звичайний bubble sort. Він повільной і не дуже ефективний,
тому для списків великих розмірів краще використовувати інші алгоритми, наприклад merge (злиття) , quick sort, або вбудований в Python швидкий і надійний алгоритм для сортування - метод sort та функція sorted().

 

#Task 2

#Implement the mergeSort function without using the slice operator.

def mergeSort(arr):
    if len(arr) <= 1:
        return arr

    mid = len(arr) // 2 
    left = [arr[i] for i in range(mid)] #замість slice застосовую list comprehension 
    right = [arr[i] for i in range(mid, len(arr))]

    left = mergeSort(left)
    right = mergeSort(right)

    return merge(left, right)


def merge(left, right):
    merged = []
    left_ind = 0
    right_ind = 0

    while left_ind < len(left) and right_ind < len(right):
        if left[left_ind] < right[right_ind]:
            merged.append(left[left_ind])
            left_ind += 1
        else:
            merged.append(right[right_ind])
            right_ind += 1

    while left_ind < len(left):
        merged.append(left[left_ind])
        left_ind += 1

    while right_ind < len(right):
        merged.append(right[right_ind])
        right_ind += 1

    return merged




#Task 3

#One way to improve the quicksort is to use an insertion sort on lists that are small in length (call it the “partition limit”). 
#Why does this make sense? Re-implement the quicksort and use it to sort a random list of integers.
#Perform analysis using different list sizes for the partition limit.

Використання insertion sort на невеликих списках в алгоритмі швидкого сортування quick sort може покращити його продуктивність, завдяки кращій часовій складності для малих розмірів вхідних даних insertin sort з quick sort, з практичною метою економії ресурсів.
Worst case для сортування вставкою має часову складність O(n^2) , але це не є перешкодою, у тому випадку, коли розмір вхідних даних невеликий. 
Quick Sort має середню часову складність O(n log n), але через велику кількість кроків розбиття і рекурсію в процесі його виконання, воно має дорожчі витрати по ресурсах.

Застосовуючи сортування insertion для невеликих списків, ми зменшуємо кількість ресурсів що витрачаються на quick sort,завдяки ефективності сортування insertion для малих розмірів вхідних даних. 
Коли розмір списку стає меншим за певний поріг (межа розділу), ми переходимо до використання сортування insertion замість quick sort.
Це допомагає зменшити кількість викликів рекурсії та розбиття на розділи, які можуть забирати забагато ресурсів (для невеликих списків).



def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

def quicksort(arr, part_limit):
    if len(arr) <= part_limit:
        insertion_sort(arr)
    else:
        if len(arr) > 1:
            pivot = arr[len(arr) // 2]
            left_half = [x for x in arr if x < pivot]
            middle = [x for x in arr if x == pivot]
            right_half = [x for x in arr if x > pivot]
            quicksort(left_half, part_limit)
            quicksort(right_half, part_limit)
            arr[:] = left_half + middle + right_half


import random

random_list = random.sample(range(1000), 100)
print("Random List:", random_list)

part_limits = [10, 20, 30]  # Different partition limits to analyze

for limit in part_limits:
    sorted_list = random_list.copy()
    quicksort(sorted_list, limit)
    print(f"\nPartition Limit: {limit}")
    print("Sorted List:", sorted_list)


Для перевірки доцільності, можемо виміряти продуктивність використання partition limits
порівнюючи час виконання і кількість порівнянь, зроблених під час сортування. 
Вимірюючи ці показники для різних меж розділів і розмірів вхідних списків, 
можна визначити оптимальну межу розділів для збалансування продуктивності між швидким сортуванням і сортуванням вставкою.

import time

random_list = random.sample(range(1000), 1000) 

partition_limits = [10, 20, 30]

for limit in partition_limits:
    sorted_list = random_list.copy()
    start_time = time.time()
    quicksort(sorted_list, limit)
    end_time = time.time()
    execution_time = end_time - start_time
    num_comparisons = len(sorted_list) * (len(sorted_list) - 1) // 2  # Total comparisons for a sorted list

    print(f"\nPartition Limit: {limit}")
    print("Sorted List:", sorted_list)
    print("Execution Time:", execution_time) #час виконання
    print("Number of Comparisons:", num_comparisons) #кількість порівнянь

Маємо список з 1000 цілих чисел та 
алгоритм швидкого сортування з межею розділу (10, 20, 30). 
Вимірюємо час виконання, обчислюючи різницю між початковим і кінцевим часом.
Кількість порівнянь обчислюється на основі довжини відсортованого списку за формулою загальної кількості порівнянь у відсортованому списку (n * (n - 1) / 2).

В результаті маємо час виконання і кількість порівнянь для кожної межі розділу, що дозволяє 
 проаналізувати продуктивність різних лімітів розділів і визначити, який з них забезпечує найкращий баланс
 між продуктивністю і якістю сортування для конкретного випадку.


